package client.ui.tim;

import client.ui.clan.*;
import client.domen.Clan;
import client.domen.Tim;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

/**
 *
 * @author luka
 */
public class FormTim extends javax.swing.JFrame {

    /**
     * Creates new form FormClan
     */
    public FormTim() {
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        
        try {
            napuniTabeluTim();
        } catch (SQLException ex) {
            Logger.getLogger(FormTim.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        btnLoad1 = new javax.swing.JButton();
        btnAdd1 = new javax.swing.JButton();
        btnUpdate1 = new javax.swing.JButton();
        btnSearch1 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTim = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblClan = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setMaximumSize(new java.awt.Dimension(32767, 40));
        jPanel3.setPreferredSize(new java.awt.Dimension(1156, 40));
        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        btnLoad1.setText("Učitaj");
        btnLoad1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoad1ActionPerformed(evt);
            }
        });
        jPanel3.add(btnLoad1);

        btnAdd1.setText("Dodaj");
        btnAdd1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdd1ActionPerformed(evt);
            }
        });
        jPanel3.add(btnAdd1);

        btnUpdate1.setText("Izmeni");
        btnUpdate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdate1ActionPerformed(evt);
            }
        });
        jPanel3.add(btnUpdate1);

        btnSearch1.setText("Traži");
        jPanel3.add(btnSearch1);

        jTextField2.setPreferredSize(new java.awt.Dimension(420, 25));
        jPanel3.add(jTextField2);

        getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.PAGE_AXIS));

        tblTim.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Šifra", "Naziv"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTim.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTimMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblTim);

        jPanel1.add(jScrollPane1);

        tblClan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "Šifra", "Ime", "Prezime", "Korisničko ime", "Email", "Telefon"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblClan);

        jPanel1.add(jScrollPane2);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoad1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoad1ActionPerformed
        try {
            napuniTabeluTim();
        } catch (SQLException ex) {
            Logger.getLogger(FormTim.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLoad1ActionPerformed

    private void btnAdd1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdd1ActionPerformed
        new CreateTim(this, true).setVisible(true);
        try {
            napuniTabeluTim();
        } catch (SQLException ex) {
            Logger.getLogger(FormClan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAdd1ActionPerformed

    private void btnUpdate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdate1ActionPerformed
        int row = tblTim.getSelectedRow();
        if(row < 0) {
            JOptionPane.showMessageDialog(null, "Nije odabran red!", "Sistem", JOptionPane.WARNING_MESSAGE);
            return;
        }
        new UpdateTim(null, true, new Tim((Long)tblTim.getValueAt(row, 0), (String)tblTim.getValueAt(row, 1))).setVisible(true);
        try {
            napuniTabeluTim();
        } catch (SQLException ex) {
            Logger.getLogger(FormTim.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnUpdate1ActionPerformed

    private void tblTimMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTimMouseClicked
        int row = tblTim.getSelectedRow();
        if(row < 0) return;
        
        try {
            napuniTabeluClan(new Tim((Long)tblTim.getValueAt(row, 0), (String)tblTim.getValueAt(row, 1)));
        } catch (SQLException ex) {
            Logger.getLogger(FormTim.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tblTimMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd1;
    private javax.swing.JButton btnLoad1;
    private javax.swing.JButton btnSearch1;
    private javax.swing.JButton btnUpdate1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTable tblClan;
    private javax.swing.JTable tblTim;
    // End of variables declaration//GEN-END:variables


    private void napuniTabeluClan(Tim tim) throws SQLException {
        List<Clan> lc = kontroleri.KontrolerClanTim.getClanoviTima(tim);
        TableModel tm = tblClan.getModel();
        DefaultTableModel dtm = (DefaultTableModel) tm;
        dtm.setRowCount(0);
        for(Clan c : lc)
        {
            Object[] row = new Object[]{
                c.getId(),
                c.getIme(),
                c.getPrezime(),
                c.getKorisnickoIme(),
                c.getEmail(),
                c.getTelefon()
            };
            dtm.addRow(row);
        }
        
    }

    private void napuniTabeluTim() throws SQLException {
        List<Tim> lt = kontroleri.KontrolerTim.getList();
        TableModel tm = tblTim.getModel();
        DefaultTableModel dtm = (DefaultTableModel) tm;
        dtm.setRowCount(0);
        for(Tim t : lt) {
            Object[] row = new Object[] {
                t.getId(),
                t.getNaziv()
            };
            dtm.addRow(row);
        }
         
        
    }
}
